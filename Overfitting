import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

x = np.linspace(0, 10, 100).reshape(-1, 1)
y = 3 * x**2 + 2 * x + 5 + np.random.randn(100, 1)

poly = PolynomialFeatures(degree=15)
x_poly = poly.fit_transform(x)

model = LinearRegression()
model.fit(x_poly, y)

x_test = np.linspace(0, 10, 100).reshape(-1, 1)
x_test_poly = poly.transform(x_test)
y_pred = model.predict(x_test_poly)

plt.scatter(x, y, label="Data")
plt.plot(x_test, y_pred, label="Overfit Model", color='red')
plt.legend()
plt.show()

mse = mean_squared_error(y, model.predict(x_poly))
print("MSE:", mse)



В этом примере демонстрируется явление overfitting, когда модель
слишком сложная для данных. Полином 15-й степени используется для обучения, 
и это приводит к тому, что модель идеально подгоняет данные, но плохо обобщает
информацию на новых данных. Overfitting возникает из-за слишком большого 
количества параметров, которые слишком точно соответствуют обучающим данным, 
но не предсказывают корректно для новых входов. В результате,
модель может иметь высокую ошибку при применении на новых данных.
